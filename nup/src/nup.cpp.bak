#define GLAD_GL_IMPLEMENTATION
#include "glad_gl.h"
#define GLFW_INCLUDE_NONE
#include <GLFW/glfw3.h>

#include <stdio.h>
#include <stdlib.h>
#include <iostream>

#define CHECK_GL_ERROR()                                                       \
    ({                                                                         \
        GLenum __error = glGetError();                                         \
        if (__error)                                                           \
            printf("OpenGL error 0x%04X in %s %d\n", __error, __FUNCTION__,    \
                __LINE__);                                                     \
    })

const char* shader = R"RAW(

#version 430 core
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;

void main() {
    vec4 value = vec4(0.0, 0.0, 0.0, 1.0);
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    value.x = float(texelCoord.x)/(gl_NumWorkGroups.x);
    value.y = float(texelCoord.y)/(gl_NumWorkGroups.y);
    imageStore(imgOutput, texelCoord, value);
}

)RAW";

const char* vertex_shader = R"RAW(

#version 430 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoords;
    
out vec2 TexCoords;
    
void main()
{
    TexCoords = aTexCoords;
    gl_Position = vec4(aPos, 1.0);
}


)RAW";

const char* fragment_shader = R"RAW(

#version 430 core
out vec4 FragColor;
    
in vec2 TexCoords;
    
uniform sampler2D tex;
    
void main()
{             
    vec3 texCol = texture(tex, TexCoords).rgb;      
    FragColor = vec4(texCol, 1.0);
}

)RAW";

struct vertex {
    float x, y, z;
    float u, v;
};

class ComputeShader {
public:
    GLuint ID;

    ComputeShader(const char* cShaderCode)
    {
        unsigned int compute;
        compute = glCreateShader(GL_COMPUTE_SHADER);
        glShaderSource(compute, 1, &cShaderCode, NULL);
        glCompileShader(compute);
        checkCompileErrors(compute, "COMPUTE");

        // shader Program
        ID = glCreateProgram();
        glAttachShader(ID, compute);
        glLinkProgram(ID);
        checkCompileErrors(ID, "PROGRAM");
    }

    void use() { glUseProgram(ID); }

private:
    void checkCompileErrors(unsigned int shader, std::string type)
    {
        int success;
        char infoLog[1024];
        if (type != "PROGRAM") {
            glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
            if (!success) {
                glGetShaderInfoLog(shader, 1024, NULL, infoLog);
                std::cout
                    << "ERROR::SHADER_COMPILATION_ERROR of type: " << type
                    << "\n"
                    << infoLog
                    << "\n -- "
                       "--------------------------------------------------- -- "
                    << std::endl;
            }
        } else {
            glGetProgramiv(shader, GL_LINK_STATUS, &success);
            if (!success) {
                glGetProgramInfoLog(shader, 1024, NULL, infoLog);
                std::cout
                    << "ERROR::PROGRAM_LINKING_ERROR of type: " << type << "\n"
                    << infoLog
                    << "\n -- "
                       "--------------------------------------------------- -- "
                    << std::endl;
            }
        }
    }
};

class RenderShader {
public:
    GLuint ID;

    RenderShader(const char* vc, const char* fc)
    {
        unsigned int v_id;
        v_id = glCreateShader(GL_VERTEX_SHADER);
        glShaderSource(v_id, 1, &vc, NULL);
        glCompileShader(v_id);
        checkCompileErrors(v_id, "VERTEX");

        unsigned int f_id;
        f_id = glCreateShader(GL_FRAGMENT_SHADER);
        glShaderSource(f_id, 1, &fc, NULL);
        glCompileShader(f_id);
        checkCompileErrors(f_id, "FRAGMENT");

        // shader Program
        ID = glCreateProgram();
        glAttachShader(ID, v_id);
        glAttachShader(ID, f_id);
        glLinkProgram(ID);
        checkCompileErrors(ID, "PROGRAM");
    }

    void use() { glUseProgram(ID); }

private:
    void checkCompileErrors(unsigned int shader, std::string type)
    {
        int success;
        char infoLog[1024];
        if (type != "PROGRAM") {
            glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
            if (!success) {
                glGetShaderInfoLog(shader, 1024, NULL, infoLog);
                std::cout
                    << "ERROR::SHADER_COMPILATION_ERROR of type: " << type
                    << "\n"
                    << infoLog
                    << "\n -- "
                       "--------------------------------------------------- -- "
                    << std::endl;
            }
        } else {
            glGetProgramiv(shader, GL_LINK_STATUS, &success);
            if (!success) {
                glGetProgramInfoLog(shader, 1024, NULL, infoLog);
                std::cout
                    << "ERROR::PROGRAM_LINKING_ERROR of type: " << type << "\n"
                    << infoLog
                    << "\n -- "
                       "--------------------------------------------------- -- "
                    << std::endl;
            }
        }
    }
};

static void error_callback(int error, const char* description)
{
    fprintf(stderr, "Error: %d %s\n", error, description);
}

static void key_callback(
    GLFWwindow* window, int key, int scancode, int action, int mods)
{
    (void)scancode;
    (void)mods;
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, GLFW_TRUE);
}

int main(void)
{
    GLFWwindow* window;

    glfwSetErrorCallback(error_callback);

    if (!glfwInit())
        exit(EXIT_FAILURE);

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);

    window = glfwCreateWindow(640, 480, "Simple example", NULL, NULL);
    if (!window) {
        glfwTerminate();
        exit(EXIT_FAILURE);
    }

    glfwSetKeyCallback(window, key_callback);

    glfwMakeContextCurrent(window);
    gladLoadGL(glfwGetProcAddress);
    glfwSwapInterval(1);

    glClearColor(1, 0, 0, 0);

    const unsigned int TEXTURE_WIDTH = 512, TEXTURE_HEIGHT = 512;
    unsigned int texture;
    glGenTextures(1, &texture);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture);

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA32F, TEXTURE_WIDTH, TEXTURE_HEIGHT, 0,
        GL_RGBA, GL_FLOAT, NULL);

    glBindImageTexture(0, texture, 0, GL_FALSE, 0, GL_READ_ONLY, GL_RGBA32F);

    ComputeShader computeShader(shader);
    computeShader.use();

    glDispatchCompute(
        (unsigned int)TEXTURE_WIDTH, (unsigned int)TEXTURE_HEIGHT, 1);

    // glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);

    CHECK_GL_ERROR();
    RenderShader renderShader(vertex_shader, fragment_shader);
    renderShader.use();
    CHECK_GL_ERROR();

    vertex vertex_array[] = {
        { 0, 0, 0, 0, 0 },
        { 1, 0, 0, 1, 0 },
        { 1, 1, 0, 1, 1 },
        { 0, 1, 0, 0, 1 },
    };

    GLuint indices[] = { 0, 1, 2, 0, 2, 3 };

    GLuint vao;
    glGenVertexArrays(1, &vao);
    glBindVertexArray(vao);

    GLuint vbo[2];
    glGenBuffers(2, vbo);

    glBindBuffer(GL_ARRAY_BUFFER, vbo[0]);
    glBufferData(
        GL_ARRAY_BUFFER, sizeof(vertex_array), vertex_array, GL_DYNAMIC_DRAW);
    CHECK_GL_ERROR();

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, vbo[1]);
    glBufferData(
        GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_DYNAMIC_DRAW);
    CHECK_GL_ERROR();

    glEnableVertexAttribArray(0);
    glEnableVertexAttribArray(1);

    CHECK_GL_ERROR();
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(vertex), nullptr);
    CHECK_GL_ERROR();
    glVertexAttribPointer(
        1, 2, GL_FLOAT, GL_FALSE, sizeof(vertex), (void*)(sizeof(float) * 3));
    CHECK_GL_ERROR();

    CHECK_GL_ERROR();

    while (!glfwWindowShouldClose(window)) {
        glfwPollEvents();
        int width, height;
        
        // glfwGetFramebufferSize(window, &width, &height);
        // glViewport(0, 0, width, height);
        // glClear(GL_COLOR_BUFFER_BIT);
        // glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nullptr);        

        glfwSwapBuffers(window);
    }

    glfwDestroyWindow(window);

    glfwTerminate();
    exit(EXIT_SUCCESS);
}

//! [code]


